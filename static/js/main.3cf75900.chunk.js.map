{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","taskData","setTaskData","useEffect","a","fetch","process","response","text","textData","fetchedData","_","filter","map","split","line","trim","task","score","Number","parseInt","console","error","fetchData","bingoCards","length","BINGO_CENTER_INDEX","Math","floor","BINGO_CARD_SIZE","usedIndexesSet","Set","i","index","random","has","add","usedIndexes","push","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAmEeA,MA/Df,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNC,EADM,KACIC,EADJ,KAEbC,qBAAU,WAAM,4CACd,gCAAAC,EAAA,sEACyBC,MAAMC,8BAD/B,cACQC,EADR,gBAEyBA,EAASC,OAFlC,OAEQC,EAFR,OAGQC,EAAcC,IAAEC,OAAOD,IAAEE,IAAIJ,EAASK,MAAM,OAAO,SAAAC,GACvD,GAAIA,EAAKC,OAAQ,CAAC,IAAD,EACKD,EAAKD,MAAM,KADhB,mBACVG,EADU,KACJC,EADI,KAEfD,EAAOA,EAAKD,OACZ,IACEE,EAAQC,OAAOC,SAASF,EAAMF,OAAQ,IACtC,SACAK,QAAQC,MAAM,8CAAgDL,GAEhE,MAAO,CAACA,OAAMC,cAIlBhB,EAAYQ,GAhBd,4CADc,uBAAC,WAAD,wBAmBda,KACC,IAEH,IAAIC,EAAa,GACjB,GAAIvB,EAASwB,OAAS,EAAG,CAIvB,IAHA,IACMC,EAAqBC,KAAKC,MAAMC,MAChCC,EAAiB,IAAIC,IAClBC,EAAI,EAAGA,EAHQ,GAGaA,IAAK,CAGxC,IADA,IAAIC,EAAQN,KAAKC,MALK,GAKCD,KAAKO,UACrBJ,EAAeK,IAAIF,IACxBA,GAASA,EAAQ,GAPG,GAStBH,EAAeM,IAAIH,GAIrB,IADF,IAAMI,EAAW,YAAOP,GACbE,EAAI,EAAGA,EAAIK,EAAYZ,OAAQO,IACtC,GAAIA,IAAMN,EACRF,EAAWc,KAAK,4CACX,CACL,IACMrB,EAAOhB,EADKoC,EAAYL,IAE9BR,EAAWc,KAAK,8BAAMrB,EAAKA,SAIjC,OACE,sBAAKsB,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,8BAGA,kCACE,qBAAKA,UAAU,cAAf,SACGf,UChDIgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3cf75900.chunk.js","sourcesContent":["import './App.css';\nimport _ from 'lodash';\nimport React, {useEffect, useState} from \"react\";\n\nfunction App() {\n  const [taskData, setTaskData] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      const response = await fetch(process.env.PUBLIC_URL + '/values.csv');\n      const textData = await response.text();\n      const fetchedData = _.filter(_.map(textData.split('\\n'), line => {\n        if (line.trim()) {\n          let [task, score] = line.split(',');\n          task = task.trim();\n          try {\n            score = Number.parseInt(score.trim(), 10);\n          } catch {\n            console.error(\"could not parse csv file, error with task: \" + task)\n          }\n          return {task, score};\n        }\n      }));\n\n      setTaskData(fetchedData);\n    }\n    fetchData();\n  }, [])\n\n  let bingoCards = [];\n  if (taskData.length > 0) {\n    const BINGO_CARD_SIZE = 25;\n    const BINGO_CENTER_INDEX = Math.floor(BINGO_CARD_SIZE/2)\n    const usedIndexesSet = new Set()\n    for (let i = 0; i < BINGO_CARD_SIZE; i++) {\n      // random drawing\n      let index = Math.floor(Math.random() * BINGO_CARD_SIZE);\n      while (usedIndexesSet.has(index)) {\n        index = (index + 1) % BINGO_CARD_SIZE;\n      }\n      usedIndexesSet.add(index);\n    }\n  // convert to array for indexing\n  const usedIndexes = [...usedIndexesSet];\n    for (let i = 0; i < usedIndexes.length; i++) {\n      if (i === BINGO_CENTER_INDEX) {\n        bingoCards.push(<div>free</div>);\n      } else {\n        const usedIndex = usedIndexes[i];\n        const task = taskData[usedIndex]\n        bingoCards.push(<div>{task.task}</div>)\n      }\n    }\n  }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Spelunky 2 Bingo\n      </header>\n      <section>\n        <div className=\"bingo-sheet\">\n          {bingoCards}\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
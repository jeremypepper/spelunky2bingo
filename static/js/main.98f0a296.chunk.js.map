{"version":3,"sources":["Card.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","useState","isActive","setActive","className","onClick","children","App","urlSearchParams","URLSearchParams","window","location","search","seedinputFromUrl","get","debug","taskData","setTaskData","seed","setSeed","rng","seedrandom","input","React","createRef","onUseRandomSeed","Math","random","history","replaceState","useEffect","a","fetch","process","response","text","textData","fetchedData","_","split","map","line","trim","match","task","difficulty","Number","parseInt","console","error","filter","groupBy","valueOf","fetchData","taskGrid","bingoCards","flattenedBingoCards","tasksByDifficultySet","Set","i","j","index","floor","quick","difficultySet","iSum","k","iAvg","jSum","l","jAvg","avg","log","size","taskItem","delete","push","debugDifficulty","flatMap","name","ref","value","onChange","event","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.98f0a296.chunk.js","sourcesContent":["import _ from 'lodash';\nimport React, {useState} from \"react\";\n\nfunction Card(props) {\n  const [isActive, setActive] = useState(props.isActive || false);\n  const onClick = () => {\n    setActive(!isActive);\n  }\n  const className = \"card \" + (props.isActive || isActive ? \"active\" : \"notactive\");\n  return <div className={className} onClick={onClick}>{props.children}</div>\n}\n\nexport default Card;\n","import './App.css';\nimport _ from 'lodash';\nimport React, {useEffect, useState} from \"react\";\nimport Card from './Card';\nimport seedrandom from 'seedrandom';\n\nfunction App() {\n  const urlSearchParams = new URLSearchParams(window.location.search);\n  let seedinputFromUrl = urlSearchParams.get(\"seedinput\")\n  const debug = urlSearchParams.get(\"debug\");\n\n  const [taskData, setTaskData] = useState(null);\n  const [seed, setSeed] = useState(seedinputFromUrl);\n  const rng = new seedrandom(seed);\n  const input = React.createRef();\n\n\n  const onUseRandomSeed = () => {\n    seedinputFromUrl = Math.random();\n    window.history.replaceState(null, null, \"?seedinput=\" + seedinputFromUrl)\n    setSeed(seedinputFromUrl);\n  }\n\n  const onchange = (event) => {\n    setSeed(event.target.value)\n  }\n\n  if (!seedinputFromUrl) {\n    onUseRandomSeed();\n  }\n\n\n  useEffect(() => {\n    async function fetchData() {\n      const response = await fetch(process.env.PUBLIC_URL + '/values.csv');\n      const textData = await response.text();\n      const fetchedData = _(textData.split('\\n'))\n          .map(line => {\n            if (line.trim()) {\n              let [, task, difficulty] = line.match(/(.+),(\\W*\\d)/);\n              task = task.trim();\n              try {\n                difficulty = Number.parseInt(difficulty.trim(), 10);\n              } catch {\n                console.error(\"could not parse csv file, error with task: \" + task)\n              }\n              return {task, difficulty};\n            }\n          })\n          .filter()\n          .groupBy(task => task.difficulty)\n          .valueOf();\n\n      setTaskData(fetchedData);\n    }\n\n    fetchData();\n  }, [])\n\n\n  let taskGrid = [[], [], [], [], []];\n  let bingoCards = [[], [], [], [], []];\n  let flattenedBingoCards = [];\n  if (taskData) {\n    const MAX_DIFFICULTY = 5\n    const BINGO_CARD_ROWS = 5;\n    const BINGO_CARD_COLUMNS = BINGO_CARD_ROWS;\n    const tasksByDifficultySet = [\n        new Set(taskData[1]),\n        new Set(taskData[2]),\n        new Set(taskData[3]),\n        new Set(taskData[4]),\n        new Set(taskData[5])];\n    for (let i = 0; i < BINGO_CARD_ROWS; i++) {\n      for (let j = 0; j < BINGO_CARD_COLUMNS; j++) {\n        if (i === 2 && j === 2) {\n          taskGrid[i][j] = {task:\"free\", difficulty: 0}\n          continue;\n        }\n        let index;\n        let difficulty = Math.floor(rng.quick() * MAX_DIFFICULTY)\n        // safety check if we don't have enough items, bump up difficulty\n        let difficultySet = tasksByDifficultySet[difficulty];\n        if (i > 0) {\n          // get the difficulty in the column/row\n          let iSum = 0;\n          for (let k = 0; k < i; k++) {\n            iSum = iSum + taskGrid[k][j].difficulty;\n          }\n          const iAvg = iSum / i;\n\n          let jSum = 0;\n          for (let l = 0; l < j; l++) {\n            jSum = jSum + taskGrid[i][l].difficulty;\n          }\n          const jAvg = jSum / j;\n          const avg = (iAvg + jAvg) / 2;\n\n          console.log(\"iAvg\", iAvg, \"jAvg\", jAvg, difficulty)\n          if (avg < 2) {\n            difficulty++;\n          } else if (avg > 4) {\n            difficulty--;\n          }\n          console.log(\"iAvg\", iAvg, \"jAvg\", jAvg, difficulty)\n        }\n        while (difficultySet.size === 0) {\n          console.error(\"difficulty overflow in difficulty\", difficulty)\n          difficulty = (difficulty + 1 ) % MAX_DIFFICULTY;\n          difficultySet = tasksByDifficultySet[difficulty]\n        }\n        index = Math.floor(rng.quick() * difficultySet.size);\n        const taskItem = [...difficultySet][index];\n        difficultySet.delete(taskItem);\n        taskGrid[i][j] = taskItem;\n      }\n    }\n\n    for (let i = 0; i < BINGO_CARD_ROWS; i++) {\n      for (let j = 0; j < BINGO_CARD_COLUMNS; j++) {\n        if (i === 2 && j === 2) {\n          bingoCards[i].push(<Card key=\"free\" isActive={true}>free</Card>);\n        } else {\n          const task = taskGrid[i][j];\n          const debugDifficulty = debug ? (\" (\"+ task.difficulty + \")\") : \"\";\n          bingoCards[i].push(<Card key={task.task + seed}>{task.task + debugDifficulty}</Card>)\n        }\n      }\n    }\n    flattenedBingoCards = _.flatMap(bingoCards);\n  }\n  return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          Spelunky 2 Bingo\n        </header>\n        <section>\n          <form>\n            <label>Use a set seed: </label><input name=\"seedinput\" ref={input} value={seed} onChange={onchange}/>\n          </form>\n          <button onClick={onUseRandomSeed}>Use a Random Seed</button>\n        </section>\n        <section>\n          <div className=\"bingo-sheet\">\n            {flattenedBingoCards}\n          </div>\n        </section>\n\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
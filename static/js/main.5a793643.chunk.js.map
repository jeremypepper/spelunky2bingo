{"version":3,"sources":["Card.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","useState","isActive","setActive","className","onClick","children","App","seedinputFromUrl","URLSearchParams","window","location","search","get","taskData","setTaskData","seed","setSeed","rng","seedrandom","input","React","createRef","onUseRandomSeed","Math","random","history","replaceState","useEffect","a","fetch","process","response","text","textData","fetchedData","_","filter","map","split","line","trim","match","task","score","Number","parseInt","console","error","fetchData","bingoCards","length","BINGO_CENTER_INDEX","floor","BINGO_CARD_SIZE","usedIndexesSet","Set","i","index","quick","has","add","usedIndexes","push","name","ref","value","onChange","event","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAYeA,MATf,SAAcC,GAAQ,IAAD,EACWC,mBAASD,EAAME,WAAY,GADtC,mBACZA,EADY,KACFC,EADE,KAKbC,EAAY,SAAWJ,EAAME,UAAYA,EAAW,SAAW,aACrE,OAAO,qBAAKE,UAAWA,EAAWC,QAJlB,WACdF,GAAWD,IAGN,SAA8CF,EAAMM,Y,iBC4F9CC,MA/Ff,WACE,IAAIC,EAAmB,IAAIC,gBAAgBC,OAAOC,SAASC,QAAQC,IAAI,aAD1D,EAGmBZ,mBAAS,IAH5B,mBAGNa,EAHM,KAGIC,EAHJ,OAIWd,mBAASO,GAJpB,mBAINQ,EAJM,KAIAC,EAJA,KAKPC,EAAM,IAAIC,IAAWH,GACrBI,EAAQC,IAAMC,YAGdC,EAAkB,WACtBf,EAAmBgB,KAAKC,SACxBf,OAAOgB,QAAQC,aAAa,KAAM,KAAM,cAAgBnB,GACxDS,EAAQT,IAOLA,GACHe,IAKFK,qBAAU,WAAM,4CACd,gCAAAC,EAAA,sEACyBC,MAAMC,8BAD/B,cACQC,EADR,gBAEyBA,EAASC,OAFlC,OAEQC,EAFR,OAGQC,EAAcC,IAAEC,OAAOD,IAAEE,IAAIJ,EAASK,MAAM,OAAO,SAAAC,GACvD,GAAIA,EAAKC,OAAQ,CAAC,IAAD,EACMD,EAAKE,MAAM,gBADjB,mBACTC,EADS,KACHC,EADG,KAEfD,EAAOA,EAAKF,OACZ,IACEG,EAAQC,OAAOC,SAASF,EAAMH,OAAQ,IACtC,SACAM,QAAQC,MAAM,8CAAgDL,GAEhE,MAAO,CAACA,OAAMC,cAIlB7B,EAAYoB,GAhBd,4CADc,uBAAC,WAAD,wBAmBdc,KACC,IAIH,IAAIC,EAAa,GACjB,GAAIpC,EAASqC,OAAS,EAAG,CAIvB,IAHA,IACMC,EAAqB5B,KAAK6B,MAAMC,MAChCC,EAAiB,IAAIC,IAClBC,EAAI,EAAGA,EAHQ,GAGaA,IAAK,CAGxC,IADA,IAAIC,EAAQlC,KAAK6B,MAAMnC,EAAIyC,QAAU7C,EAASqC,QACvCI,EAAeK,IAAIF,IACxBA,GAASA,EAAQ,GAAK5C,EAASqC,OAEjCI,EAAeM,IAAIH,GAIrB,IADF,IAAMI,EAAW,YAAOP,GACbE,EAAI,EAAGA,EAAIK,EAAYX,OAAQM,IACtC,GAAIA,IAAML,EACRF,EAAWa,KAAK,cAAC,EAAD,CAAiB7D,UAAU,EAA3B,iBAAU,aACrB,CACL,IACMyC,EAAO7B,EADKgD,EAAYL,IAE9BP,EAAWa,KAAK,cAAC,EAAD,UAA8BpB,EAAKA,MAAxBA,EAAKA,KAAO3B,KAI7C,OACE,sBAAKZ,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,8BAGA,oCACE,iCACE,qDAA+B,uBAAO4D,KAAK,YAAYC,IAAK7C,EAAO8C,MAAOlD,EAAMmD,SAlEvE,SAACC,GAChBnD,EAAQmD,EAAMC,OAAOH,aAmEjB,wBAAQ7D,QAASkB,EAAjB,kCAEF,kCACE,qBAAKnB,UAAU,cAAf,SACG8C,UCjFIoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5a793643.chunk.js","sourcesContent":["import _ from 'lodash';\nimport React, {useState} from \"react\";\n\nfunction Card(props) {\n  const [isActive, setActive] = useState(props.isActive || false);\n  const onClick = () => {\n    setActive(!isActive);\n  }\n  const className = \"card \" + (props.isActive || isActive ? \"active\" : \"notactive\");\n  return <div className={className} onClick={onClick}>{props.children}</div>\n}\n\nexport default Card;\n","import './App.css';\nimport _ from 'lodash';\nimport React, {useEffect, useState} from \"react\";\nimport Card from './Card';\nimport seedrandom from 'seedrandom';\n\nfunction App() {\n  let seedinputFromUrl = new URLSearchParams(window.location.search).get(\"seedinput\")\n\n  const [taskData, setTaskData] = useState([]);\n  const [seed, setSeed] = useState(seedinputFromUrl);\n  const rng = new seedrandom(seed);\n  const input = React.createRef();\n\n\n  const onUseRandomSeed = () => {\n    seedinputFromUrl = Math.random();\n    window.history.replaceState(null, null, \"?seedinput=\" + seedinputFromUrl)\n    setSeed(seedinputFromUrl);\n  }\n\n  const onchange = (event) => {\n    setSeed(event.target.value)\n  }\n\n  if (!seedinputFromUrl) {\n    onUseRandomSeed();\n  }\n\n\n\n  useEffect(() => {\n    async function fetchData() {\n      const response = await fetch(process.env.PUBLIC_URL + '/values.csv');\n      const textData = await response.text();\n      const fetchedData = _.filter(_.map(textData.split('\\n'), line => {\n        if (line.trim()) {\n          let [,task, score] = line.match(/(.+),(\\W*\\d)/);\n          task = task.trim();\n          try {\n            score = Number.parseInt(score.trim(), 10);\n          } catch {\n            console.error(\"could not parse csv file, error with task: \" + task)\n          }\n          return {task, score};\n        }\n      }));\n\n      setTaskData(fetchedData);\n    }\n    fetchData();\n  }, [])\n\n\n\n  let bingoCards = [];\n  if (taskData.length > 0) {\n    const BINGO_CARD_SIZE = 25;\n    const BINGO_CENTER_INDEX = Math.floor(BINGO_CARD_SIZE / 2)\n    const usedIndexesSet = new Set()\n    for (let i = 0; i < BINGO_CARD_SIZE; i++) {\n      // random drawing\n      let index = Math.floor(rng.quick() * taskData.length);\n      while (usedIndexesSet.has(index)) {\n        index = (index + 1) % taskData.length;\n      }\n      usedIndexesSet.add(index);\n    }\n  // convert to array for indexing\n  const usedIndexes = [...usedIndexesSet];\n    for (let i = 0; i < usedIndexes.length; i++) {\n      if (i === BINGO_CENTER_INDEX) {\n        bingoCards.push(<Card key=\"free\" isActive={true}>free</Card>);\n      } else {\n        const usedIndex = usedIndexes[i];\n        const task = taskData[usedIndex]\n        bingoCards.push(<Card key={task.task + seed}>{task.task}</Card>)\n      }\n    }\n  }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Spelunky 2 Bingo\n      </header>\n      <section>\n        <form>\n          <label>Use a set seed: </label><input name=\"seedinput\" ref={input} value={seed} onChange={onchange}/>\n        </form>\n        <button onClick={onUseRandomSeed}>Use a Random Seed</button>\n      </section>\n      <section>\n        <div className=\"bingo-sheet\">\n          {bingoCards}\n        </div>\n      </section>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}